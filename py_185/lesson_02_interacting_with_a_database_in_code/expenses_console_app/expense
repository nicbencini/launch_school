#!/usr/bin/env python3

from datetime import date
import psycopg2
from psycopg2 import extras
import sys
from contextlib import contextmanager


class ExpenseData:

    @contextmanager
    def _database_connect(connection):
        connection = psycopg2.connect(dbname='expenses')
        try:
            with connection:
                yield connection
        finally:
            connection.close()


    def _display_expenses(self, result):

        if result == None:
            print('There are no expenses.')
            return
        elif len(result) == 1:
            print('There is 1 expense.')
        else:
            print(f'There are {len(result)} expenses.')


        for value in result:
            columns = [
                str(value["id"]).rjust(3),
                str(value["created_on"]),
                str(value["amount"]).rjust(12),
                str(value["memo"])
            ]
            print(" | ".join(columns))


    def _display_total(self, result):

        total = 0

        for value in result:
            total += value["amount"]

        print('--------------------------------------------------')
        print(f'Total                     {total}')

    def _setup_schema(self):

        with self._database_connect() as conn:
            with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
                cursor.execute("""
                            SELECT COUNT(*) FROM information_schema.tables
                            WHERE table_schema = 'public'
                                AND table_name = 'expenses';
                            """)
                result = cursor.fetchone()
            
                if result[0] == 0:
                    cursor.execute("""
                                CREATE TABLE expenses (
                                id serial PRIMARY KEY,
                                amount numeric(6, 2) NOT NULL,
                                memo text NOT NULL,
                                created_on date NOT NULL
                                );
                                """)

    def list_expenses(self):

        with self._database_connect() as conn:
            with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
                cursor.execute("""
                            SELECT * FROM expenses;
                            """)
                result = cursor.fetchall()
        

        self._display_expenses(result)
        self._display_total(result)

    def add_expense(self, amount, memo):

        with self._database_connect() as conn:
            with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
                cursor.execute("""
                INSERT INTO expenses(amount, memo, created_on)
                VALUES(%s,%s,%s);
                """,(amount, memo, date.today())
                    )
    
    def search_expenses(self, query):

        with self._database_connect() as conn:
            with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
                sql = "SELECT * FROM expenses WHERE memo ILIKE %s"
                cursor.execute(sql, (f"%{query}%",))
                result = cursor.fetchall()
        
        self._display_expenses(result)
        self._display_total(result)
    
    def delete_expense(self, index):

        with self._database_connect() as conn:
            with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
                sql = "SELECT * FROM expenses WHERE id = %s"
                cursor.execute(sql, (index,))
                result = cursor.fetchone()

                if result:

                    sql = "DELETE FROM expenses WHERE id = %s"
                    cursor.execute(sql, (index,))
                    print(f'The following index has been deleted:')
                    self._display_expenses([result])
                else:
                   print('Index not found')
    
    def delete_all_expense(self):
        with self._database_connect() as conn:
            with conn.cursor(cursor_factory=extras.DictCursor) as cursor:
                sql = "DELETE FROM expenses;"
                cursor.execute(sql)     
                print("All expenses have been deleted.")    



class CLI:

    def __init__(self):
        self.expense_data = ExpenseData()

    def help(self):
        print("""
            An expense recording system

            Commands:

            add AMOUNT MEMO [DATE] - record a new expense
            clear - delete all expenses
            list - list all expenses
            delete NUMBER - remove expense with id NUMBER
            search QUERY - list expenses with a matching memo field
            """)

    def run(self, arguments):

        self.expense_data._setup_schema()

        if len(arguments) == 0:
            self.help()
        else:
            if arguments[0] == 'list':
                self.expense_data.list_expenses()
            elif arguments[0] == 'add':
                if len(arguments) != 3:
                    print ("Invalid number of arguments")
                    return
                else:
                    self.expense_data.add_expense(arguments[1], arguments[2])
            elif arguments[0] == 'search':
                if len(arguments) != 2:
                    print ("Invalid number of arguments")
                    return
                else:
                    self.expense_data.search_expenses(arguments[1])
            elif arguments[0] == 'delete':
                if len(arguments) != 2:
                    print ("Invalid number of arguments")
                    return
                else:
                    self.expense_data.delete_expense(arguments[1])
            elif arguments[0] == 'clear':
                response = input('This will remove all expenses. Are you sure? (enter y to confirm) # Enter y')
                if response.lower() == 'y':
                    self.expense_data.delete_all_expense()


if __name__ == '__main__':
    
    arguments = sys.argv[1:]
    cli = CLI()
    cli.run(arguments)